name: Build

on:
  workflow_call:
    inputs:
      release:
        required: true
        type: boolean
        description: "Whether the new version is a release. This determines whether the version is grabbed from the tag (release) or an alpha is made using the last published tag (PR)"
    outputs:
      package_version:
        description: "The version of the package that was built"
        value: ${{ jobs.build.outputs.built_version }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      built_version: ${{ steps.set-version.outputs.NEW_VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup project
        uses: ./.github/actions/setup-action

      - name: Version package as PR
        if: ${{ inputs.release == false }}
        id: version-pr
        run: |
          # Get latest tag or, as a fallback, 0.0.0
          LATEST_TAG=$(git for-each-ref --sort=-v:refname --count 1 --format="%(refname:short)" "refs/tags/[0123456789]*.[01234556789]*.*[0123456789]" | awk -v def="0.0.0" '{print} END { if(NR==0) {print def} }')
          echo "setting latest tag ($LATEST_TAG) as version"
          poetry version $LATEST_TAG

          echo "incrementing patch version"
          poetry version patch

          NEW_VERSION=$(poetry version | cut -d " " -f 2)${{ format('-alpha-{0}-', github.event.number) }}$(date +%s)
          echo "setting new version ($NEW_VERSION)"
          poetry version $NEW_VERSION
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Version package as release
        if: ${{ inputs.release == true }}
        id: version-release
        run: |
          NEW_VERSION=${{ github.event.release.tag_name }}
          poetry version $NEW_VERSION
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Build
        id: build
        run: |
          poe build

      - name: Archive build artifact
        uses: actions/upload-artifact@v4
        with:
          name: package-dist
          path: dist

      - name: Set version as job output
        id: set-version
        run: |
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT